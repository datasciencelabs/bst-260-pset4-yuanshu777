---
title: Problem set 4
date: 2025-10-05
---

In the next problem set, we plan to explore the relationship between
COVID-19 death rates and vaccination rates across US states by visually
examining their correlation. This analysis will involve gathering
COVID-19 related data from the CDC's API and then extensively processing
it to merge the various datasets. Since the population sizes of states
vary significantly, we will focus on comparing rates rather than
absolute numbers. To facilitate this, we will also source population
data from the US Census to accurately calculate these rates.

In this problem set we will learn how to extract and wrangle data from
the data US Census and CDC APIs.

1.  Get an API key from the US Census at
    <https://api.census.gov/data/key_signup.html>. You can't share this
    public key. But your code has to run on a TFs computer. Assume the
    TF will have a file in their working directory named `census-key.R`
    with the following one line of code:

```         
census_key <- "A_CENSUS_KEY_THAT_WORKS"
```

Write a first line of code for your problem set that defines
`census_key` by running the code in the file `census-key.R`.

```{r}

source("census-key.R")

```

2.  The [US Census API User
    Guide](https://www.census.gov/content/dam/Census/data/developers/api-user-guide/api-user-guide.pdf)
    provides details on how to leverage this valuable resource. We are
    interested in vintage population estimates for years 2021 and 2022.
    From the documentation we find that the *endpoint* is:

```{r}
url <- "https://api.census.gov/data/2021/pep/population"
```

Use the **httr2** package to construct the following GET request.

```         
https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=YOURKEYHERE
```

Create an object called `request` of class `httr2_request` with this URL
as an endpoint. Hint: Print out `request` to check that the URL matches
what we want.

```{r}
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
  req_url_query(
    get = "POP_2020,POP_2021,NAME",
    'for' = "state:*",
    key = census_key
  )

request
```

3.  Make a request to the US Census API using the `request` object. Save
    the response to and object named `response`. Check the response
    status of your request and make sure it was successful. You can
    learn about *status codes*
    [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).

```{r}
response <- request |> req_perform()

response
```

4.  Use a function from the **httr2** package to determine the content
    type of your response.

```{r}
resp_content_type(response)
```

5.  Use just one line of code and one function to extract the data into
    a matrix. Hints: 1) Use the `resp_body_json` function. 2) The first
    row of the matrix will be the variable names and this OK as we will
    fix in the next exercise.

```{r}
population <- response |> resp_body_json() |> do.call(rbind, args = _)

```

6.  Examine the `population` matrix you just created. Notice that 1) it
    is not tidy, 2) the column types are not what we want, and 3) the
    first row is a header. Convert `population` to a tidy dataset.
    Remove the state ID column and change the name of the column with
    state names to `state_name`. Add a column with state abbreviations
    called `state`. Make sure you assign the abbreviations for DC and PR
    correctly. Hint: Use the **janitor** package to make the first row
    the header.

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |> 
  as_tibble() |> 
  row_to_names(row_number = 1) |>
  select(-state) |>
  rename(state_name = NAME) |>
  pivot_longer(cols = starts_with("POP_"),
               names_to = "year",
               values_to = "population"
               ) |>
  mutate(year = str_remove(year, "POP_"),
         population = as.numeric(population)) |> 
  mutate(state_name = as.character(state_name),
         state = case_when(
         state_name%in% state.name ~
         state.abb[match(state_name,state.name)],
         state_name == "District of Columbia" ~ "DC",
         state_name == "Puerto Rico" ~ "PR",
         TRUE ~ NA_character_
           )
         )
  
```

7.  As a check, make a barplot of states' 2021 and 2022 populations.
    Show the state names in the y-axis ordered by population size. Hint:
    You will need to use `reorder` and use `facet_wrap`.

```{r}
population |>
  ggplot(aes(x= population,
             y= reorder(state_name, population),
             fill = year)) +
  geom_col(color = "darkgoldenrod", linewidth  = 0.3) +
  coord_flip() +
  facet_wrap(~ year) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 4)) +
  scale_x_continuous(labels = scales::comma)

  # reorder state
  # assign aesthetic mapping
  # use geom_col to plot barplot
  # flip coordinates
  # facet by year



```

8.  The following URL:

```{r}
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
```

points to a JSON file that lists the states in the 10 Public Health
Service (PHS) defined by CDC. We want to add these regions to the
`population` dataset. To facilitate this create a data frame called
`regions` that has two columns `state_name`, `region`, `region_name`.
One of the regions has a long name. Change it to something shorter.

```{r}
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url) 

regions <- map_dfr(1:nrow(regions), ~ tibble(
    state_name = regions$states[[.x]],
    region = regions$region[[.x]],
    region_name = regions$region_name[[.x]]
  )) |>
  mutate(region_name = if_else(region_name ==
    "New York and New Jersey, Puerto Rico, Virgin Islands",
    "NY + Territories",
    region_name
  )) |>
  filter(state_name %in% c(state.name, "District of Columbia", "Puerto Rico"))

```

9.  Add a region and region name columns to the `population` data frame.

```{r}
population <- population |>
  left_join(regions, by = "state_name")

```

10. From reading <https://data.cdc.gov/> we learn the endpoint
    `https://data.cdc.gov/resource/pwn4-m3yp.json` provides state level
    data from SARS-COV2 cases. Use the **httr2** tools you have learned
    to download this into a data frame. Is all the data there? If not,
    comment on why.

```{r}
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |> 
  req_perform() |> 
  resp_body_json(simplifyDataFrame = TRUE) 

```

We see exactly 1,000 rows. We should be seeing over $52 \times 3$ rows
per state.

11. The reason you see exactly 1,000 rows is because CDC has a default
    limit. You can change this limit by adding `$limit=10000000000` to
    the request. Rewrite the previous request to ensure that you receive
    all the data. Then wrangle the resulting data frame to produce a
    data frame with columns `state`, `date` (should be the end date) and
    `cases`. Make sure the cases are numeric and the dates are in `Date`
    ISO-8601 format.

```{r}
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- cases_raw <- request(api) |> 
  req_url_query(`$limit` = "10000000000") |>
  req_perform() |> 
  resp_body_json(simplifyDataFrame = TRUE) |>
  mutate(
    date = as.Date(end_date),
    cases = as.numeric(new_cases)
  ) |>
  select(state, date, cases)

```

12. For 2020 and 2021, make a time series plot of cases per 100,000
    versus time for each state. Stratify the plot by region name. Make
    sure to label you graph appropriately.

```{r}

cases <- cases_raw |>
  mutate(year = as.character(year(date))) |>
  right_join(population |> select(state, year, population, region_name),
            by = c("state", "year")) |>
    filter(year %in% c("2020", "2021"))

cases |>
  filter(year %in% c(2020, 2021)) |>
  ggplot(aes(x = date, y = (cases / population)*1e5, color = state)) +
  geom_line(alpha = 0.6) +
  facet_wrap(~ region_name) +
  labs(
    title = "COVID-19 Cases per 100,000 (2020–2021)",
    x = "Date",
    y = "Cases per 100,000"
  )



```

13. The dates in the `cases` dataset are stored as character strings.
    Use the **lubridate** package to properly parse the `date` column,
    then create a summary table showing the total COVID-19 cases by
    month and year for 2020 and 2021. The table should have columns for
    year, month (as month name), and total cases across all states.
    Order by year and month. Use the **knitr** package and `kable()`
    function to display the results as a formatted table.

```{r}
cases |> mutate(
  date = ymd(date), month = month(date, label = TRUE, abbr = FALSE)) |>
  group_by(year,month) |>
  summarise(total_cases = sum(cases), .groups = "drop") |>
  arrange(year, month) |>
  knitr::kable( caption = "Total COVID-19 Cases by Month (2020–2021)")

  
```

14. The following URL provides additional COVID-19 data from the CDC in
    JSON format:

```{r}
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
```

Use **httr2** to download COVID-19 death data from this endpoint. Make
sure to remove the default limit to get all available data. Create a
clean dataset called `deaths` with columns `state`, `date`, and `deaths`
(renamed from the original column name). Ensure dates are in proper Date
format and deaths are numeric.

```{r}
deaths <- request(deaths_url) |>
  req_url_query(`$limit` = "10000000000") |>
  req_perform() |>
  resp_body_json(simplifyDataFrame = TRUE) |>
  mutate(
    date = as.Date(end_date),
    deaths = as.numeric(total_deaths)
  ) |>
  filter(state %in% c(state.name, "District of Columbia", "Puerto Rico"))

```

15. Using the `deaths` dataset you created, make a bar plot showing the
    total COVID-19 deaths by state. Show only the top 10 states with the
    highest death counts. Order the bars from highest to lowest and use
    appropriate labels and title.

```{r}
deaths |>
  group_by(state) |>
  summarise(td = sum(deaths, na.rm = TRUE), .groups = "drop") |>
  mutate(rank = rank(td))|>
  filter(rank <= 10) |>
  ggplot(aes(x = reorder(state, td), y = td)) +
  geom_bar(stat = "identity", color = "darkgoldenrod", linewidth  = 1) +
  coord_flip() +
  labs(
    title = "Total COVID-19 Deaths by State",
    x = "State",
    y = "Total Deaths"
  ) +
  geom_col(fill = "firebrick")



```
